// Generated by CoffeeScript 1.10.0
(function() {
  var Resource, ServiceItem, ServiceTemplate, Vehicle, _, async, mongoose;

  mongoose = require('mongoose');

  Resource = require('../../src/resourcejs/Resource');

  Vehicle = require('../../models/firefly/Vehicle').model;

  ServiceItem = require('../../models/firefly/ServiceItem').model;

  ServiceTemplate = require('../../models/admin/ServiceTemplate').model;

  _ = require('underscore');

  async = require('async');

  module.exports = function(app, model) {
    return Resource(app, '/servicetemplates/:servicetemplateId', 'Vehicles', model).post({
      before: function(req, res, next) {
        console.log("PUT serviceTemplate/id/Vehicles");
        ServiceTemplate.findById(req.params.servicetemplateId, function(error, result) {
          var funcs, i, len, ref, template, vehicleId;
          template = result;
          funcs = [];
          ref = req.body;
          for (i = 0, len = ref.length; i < len; i++) {
            vehicleId = ref[i];
            console.log("Create for vehicle" + vehicleId);
            funcs.push(function(cb) {
              ServiceItem.findOne({
                servicetemplate: template.id,
                vehicle: vehicleId
              }, function(error, result) {
                var item, serviceItem;
                if (error || (result == null) || result.length === 0) {
                  serviceItem = {
                    given: Date.now(),
                    reasons: [
                      {
                        name: 'triggered',
                        source: 'wizard'
                      }
                    ],
                    times: 1,
                    vehicle: vehicleId,
                    servicetemplate: template.id,
                    name: template.name,
                    description: template.description,
                    artwork: template.artwork,
                    icon: template.icon,
                    offers: [],
                    advice: [],
                    tasks: template.tasks
                  };
                  item = new ServiceItem(serviceItem);
                  item.save(function(error) {
                    cb(error, item);
                  });
                } else {
                  cb(error, result);
                }
              });
            });
          }
          return async.parallel(funcs, function(error, result) {
            if (error) {
              res.render('error', {
                error: {
                  status: "Error creating ServiceItems",
                  stack: "From controllers/ServiceTemplateMojioVehicle"
                },
                message: 'Error is' + error.message
              });
            } else {
              console.log("results" + result);
              res.sendStatus(200);
            }
          });
        });
      }
    });
  };

}).call(this);

//# sourceMappingURL=ServiceTemplateMojioVehicle.js.map
