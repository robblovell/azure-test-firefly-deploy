// Generated by CoffeeScript 1.10.0
(function() {
  var MojioSDK, Vehicle, app, assert, config, createVehicle, expect, express, getMe, getMojioVehicle, getToken, getVehicle, mongoose, nock, pathStub, proxyquire, ref, should;

  proxyquire = require('proxyquire');

  pathStub = {};

  config = require('../config/config');

  mongoose = require('mongoose');

  mongoose.connect(config.db);

  should = require('should');

  assert = require('chai').assert;

  expect = require('chai').expect;

  express = require('express');

  nock = require('nock');

  Vehicle = require('../models/firefly/Vehicle').model;

  app = express();

  ref = require('../src/auth')(app), getToken = ref[0], getMe = ref[1], getVehicle = ref[2], getMojioVehicle = ref[3], createVehicle = ref[4];

  MojioSDK = require('mojio-js-sdk');

  describe('Authorization Tests', function() {
    var authorization, call, callback_url, client_id, client_secret, mojio, options, results, sdk, timeout, token, user, vehicle;
    token = {
      access_token: 'token'
    };
    results = {
      token: token
    };
    user = null;
    mojio = null;
    vehicle = null;
    client_id = 'cacc0d94-b6b4-4da7-9983-3991de197038';
    client_secret = '427d5794-5021-4274-a6e8-a38d5d83bf99';
    call = null;
    timeout = 50;
    callback_url = "http://localhost:3000/callback";
    authorization = {
      client_id: client_id,
      client_secret: client_secret,
      redirect_uri: 'http://localhost:3000/callback',
      username: 'ashisha@moj.io',
      password: 'Test123',
      scope: 'full',
      grant_type: 'password'
    };
    options = {
      environment: 'staging',
      accountsURL: 'accounts.moj.io',
      apiURL: 'api.moj.io',
      pushURL: 'push.moj.io',
      client_id: authorization.client_id,
      client_secret: authorization.client_secret
    };
    sdk = new MojioSDK(options);
    before(function(done) {
      return sdk.token(authorization.redirect_uri).credentials(authorization.username, authorization.password).scope(['full']).callback(function(error, result) {
        if (error) {
          console.log('Access Token Error' + "  url:" + sdk.url());
          return done(error, result);
        } else {
          return sdk.token().parse(result).callback(function(error, result) {
            token = result;
            return done(error, result);
          });
        }
      });
    });
    it('getToken should get a token', function(done) {
      (getToken !== null).should.be["true"];
      return getToken(token.access_token, function(error, result) {
        result.token.access_token.should.be.equal(token.access_token);
        done();
      });
    });
    it('getMe should get a user', function(done) {
      (getMe !== null).should.be["true"];
      return getMe(results, function(error, result) {
        (results.mojioUser.Id !== null).should.be["true"];
        done();
      });
    });
    it('getVehicle should get a firefly vehicle-user object', function(done) {
      (getVehicle !== null).should.be["true"];
      (results.mojioUser.Id !== null).should.be["true"];
      return getVehicle(results, function(error, result) {
        (result !== null).should.be["true"];
        done();
      });
    });
    it('getMojioVehicle should get a mojio vehicle', function(done) {
      (getMojioVehicle !== null).should.be["true"];
      return getMojioVehicle(results, function(error, result) {
        (results.mojioVehicles[0].Id !== null).should.be["true"];
        done();
      });
    });
    return it('createVehicle should get create a firefly vehicle', function(done) {
      (createVehicle !== null).should.be["true"];
      return createVehicle(results, function(error, result) {
        (result.vehicles[0] !== null).should.be["true"];
        done();
      });
    });
  });

}).call(this);

//# sourceMappingURL=auth_test.js.map
